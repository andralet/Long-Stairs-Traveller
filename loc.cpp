#include "stat.hpp"

const char *TROUBLES[TROUBLE_NUM] = {
    "Слабый туман (40 фт зрения)",
    "Сильный туман (20 фт зрения)",
    "Жутчайший туман (5 фт зрения)",
    "Меметическая угроза",
    "Антимеметическая угроза",
    "До одной из дверей сложно добраться",
    "Случай из RDP: еда/вода",
    "Случай из RDP: торговец",
    "Случай из RDP: белая мышь",
    "Ни одна из дверей не соответствует описанию (прибавьте к выбору игроков 1)",
    // 10
    "Ни одна из дверей не соответствует описанию (прибавьте к выбору игроков 3)",
    "Ни одна из дверей не соответствует описанию (вычтите из выбора игроков 1)",
    "Ни одна из дверей не соответствует описанию (вычтите из выбора игроков 3)",
    "В комнате не работает магия",
    "Враги бестелесны и против них не работает материальное оружие",
    "Комната наводнена физическими ловушками",
    "Комната находится во временной петле",
    "Если вы спускались вниз, эта комната ещё на уровень ниже",
    "Если вы поднимались вверх, эта комната ещё на уровень выше",
    "Вы попали в ближайшую якорную точку",
    // 20
    "Вы попали в Hellmouth",
    "Комната погружена в магическую тьму",
    "Комната магически освещена",
    "Сильная вонь (плохо работает обоняние)",
    "Постоянно слышны шепотки и злобные смешки из не обозреваемых частей комнаты",
    "Комната наполнена несвязным криком (проблемы со слухом)",
    "Комната находится в зоне магической тишины",
    "Все двери одинаковы и согласно картам ведут к скоропостижной кончине (хотя по факту это не так)",
    "Все двери одинаковы и согласно картам ведут вниз в лес (хотя по факту это не так)",
    "Все двери одинаковы и согласно картам ведут вверх в болото (хотя по факту это не так)",
    // 30
    "Здесь лежит тело бойца",
    "На постаменте аккуратно разложены карты (следующие им улучшают карту на 5)",
    "Здесь лежит тело неизвестного существа",
    "Здесь есть босс (одиночка силы +1)",
    "Здесь есть босс (одиночка силы +2)",
    "Монстров нет",
    "Все предметы (в том числе двери) из этой комнаты невидимы",
    "Сила гравитации вдвое выше",
    "Сила гравитации вдвое меньше",
    "Сила гравитации направлена к потолку",
    // 40
    "Здесь синие",
    "Здесь красные",
    "Здесь и синие, и красные",
    "Это тупик!!!",
    "Вы не различаете друзей и врагов",
    "До выхода вы теряете всю одежду (включая броню)",
    "До выхода вы теряете всё снаряжение, которое не находилось у вас в руках или в прямом контакте с кожей (сохраняются сумки, но не содержимое)",
    "До выхода вы меняетесь телами (капитан попадает в тело медика, медик - новичка, новичок - капитана).",
    "До выхода вы теряете всё снаряжение, которое находилось у вас в руках",
    "До выхода все ваши сумки считаются сумками хранения (и требуют соответствующих бросков)",
    // 50
    "Исцеляющая магия в этой комнате наносит урон вместо лечения",
    "Боевая магия в этой комнате исцеляет вместо нанесения урона",
    "Сказавший первым слово превращается в жирную корову на 1 минуту",
    "Делая шаг, вы телепортируетесь на 10 футов (на 5 удастся сдвинуться только уперевшись в стену)",
    "На всех бросках урона в комнате выпадает максимум",
    "На всех бросках урона в комнате выпадает минимум",
    "На всех бросках исцеления в комнате выпадает максимум",
    "На всех бросках исцеления в комнате выпадает минимум",
    "+1 на все ходы в комнате",
    "+2 на все ходы в комнате",
    // 60
    "-1 на все ходы в комнате",
    "-2 на все ходы в комнате",
    "До выхода вы все начинаете говорить на разных языках",
    "До выхода вы все не можете использовать сложные ходы",
    "До выхода вы забываете все свои заклинания",
    "Согласно RDP вы обязаны поспать в этой комнате",
    "Согласно RDP вы обязаны заняться сексом",
    "Согласно RDP вы обязаны избить капитана (как минимум по 1 урона от каждого из участников отряда)",
    "Согласно RDP вы обязаны избить медика (как минимум по 1 урона от каждого из участников отряда)",
    "Согласно RDP вы обязаны избить новичка (как минимум по 1 урона от каждого из участников отряда)",
    // 70
    "Согласно RDP вы обязаны напиться (и алкоголь тут есть:))",
    "Согласно RDP вы обязаны исповедоваться и покаяться в своих грехах",
    "Согласно RDP вы обязаны спеть песню или прочитать стих",
    "Согласно RDP вы обязаны принести клятву верности кому-то или чему-то",
    "Согласно RDP вы обязаны кого-то убить (лучше монстра:))",
    "Согласно RDP вы обязаны покинуть комнату в течение минуты",
    "Согласно RDP вы обязаны провести в комнате не менее часа",
    "Согласно RDP вы обязаны съесть сапог или шляпу (можно один на всех)",
    "Согласно RDP вы обязаны пропеть матерные частушки",
    "Согласно RDP вы обязаны пообещать никогда больше не спускаться в Long Stairs",
    // 80
    "Согласно RDP вы обязаны пообещать никогда больше не подниматься в Hellmouth",
    "До выхода капитан иммунен к урону и негативным состояниям",
    "До выхода медик иммунен к урону и негативным состояниям",
    "До выхода новичок иммунен к урону и негативным состояниям",
    "\"Чистокровные\" (без ходов других классов) кастеры могут немедленно подготовить новые заклинания",
    "Все кастеры могут немедленно подготовить новые заклинания",
    "Все члены отряда немедленно получают преимущества отдыха в лагере",
    "Все члены отряда немедленно получают эффект зелья здоровья",
    "Все члены отряда немедленно получают эффект противоядия",
    "До выхода всё снаряжение отряда становится магическим, хотя его эффекты почти бесполезны",
    // 90
    "До выхода всё снаряжение отряда становится магическим, его эффекты неизвестны, но наверняка полезны",
    "До выхода всё снаряжение отряда становится магическим, его эффекты неизвестны и могут быть придуманы ИГРОКАМИ!!!",
    "До выхода всё снаряжение отряда становится магическим, его эффекты неизвестны, но наверняка вредны",
    "Согласно RDP член команды должен станцевать стриптиз",
    "Согласно RDP вы обязаны признаться в любви к кому-то или чему-то",
    "Согласно RDP вы обязаны пожертвовать что-то ценное для отряда",
    "Согласно RDP вы должны посвятить кому-то или чему-то балладу",
    "Один из членов отряда невидим, неслышим, неосязаем и не может влиять на окружение до выхода из комнаты",
    "Один из членов отряда немедленно умирает. Он воскреснет со старым здоровьем при выносе тела из комнаты",
    "Один из членов отряда немедленно умирает. Он воскреснет со старым здоровьем через 5 минут",
    // 100
    "Один из членов отряда немедленно умирает. Он воскреснет со старым здоровьем, если начать по нему поминальную службу",
    "Согласно RDP вы не можете разговаривать в этой комнате",
    "Все существа в комнате могут говорить только на русском (если не знают его - говорить не могут)",
    "Все существа в комнате могут говорить только на английском (если не знают его - говорить не могут)",
    "Все существа в комнате могут говорить только на типичном языке монстров (если не знают его - говорить не могут)",
    "Все существа в комнате говорят задом-наперёд",
    "ДМ молчит до выхода отряда из комнаты",
    "ДМ обзывается и ругает игроков до выхода отряда из комнаты",
    "ДМ хвалит игроков и признаётся им в любви до выхода из комнаты",
    "Один из членов отряда немедленно влюбляется в остальных и лезет с ними целоваться (эффект проходит при выходе из комнаты)",
    // 110
    "До выхода каждый уверен, что один из членов отряда - предатель и хочет завести их на верную смерть",
    "Чутьё говорит капитану не заходить в эту комнату",
    "Чутьё говорит медику не заходить в эту комнату",
    "Чутьё говорит новичку не заходить в эту комнату",
    "Чутьё говорит капитану зайти именно в эту комнату",
    "Чутьё говорит медику зайти именно в эту комнату",
    "Чутьё говорит новичку зайти именно в эту комнату",
    "До выхода все члены отряда вместе со снаряжением невидимы",
    "До выхода все члены отряда невидимы, но не их снаряжение",
    "До выхода всё снаряжение всех членов отряда невидимо",
    // 120
    "Цель миссии находится в этой комнате",
    "До выхода все члены отряда нематериальны и не могут влиять на окружающий мир, кроме как посредством магии (за исключением открытия дверей)",
    "Согласно RDP все члены отряда должны непереставая молиться",
    "Согласно RDP все члены отряда должны говорить стихами",
    "Выстрелы из \"воображаемого\" оружия наносят реальный урон",
    "Первые 3 слова любой фразы интерпретируются как желание и исполняются. Желание не может выходить за пределы комнаты и не ограничивается ничем, кроме сказанных слов. Оно максимально подлое на усмотрение ДМа",
    "Первый вошедший немедленно бросает 2d6 без модификаторов: 10+ - ничего не происходит, 7-9 - теряет половину текущего здоровья, 6- - теряет хиты в количестве половины максимального здоровья",
    "Броски на 10+ считаются провальными, а на 6- - успешными (нынче всё наоборот:))",
    "Весь получаемый отрядом урон до вычета брони переносится на капитана (не игнорирует его броню)",
    "Весь получаемый отрядом урон до вычета брони переносится на медика (не игнорирует его броню)",
    // 130
    "Весь получаемый отрядом урон до вычета брони переносится на новичка (не игнорирует его броню)",
    "Весь получаемый отрядом урон после вычета брони переносится на капитана (игнорирует его броню)",
    "Весь получаемый отрядом урон после вычета брони переносится на медика (игнорирует его броню)",
    "Весь получаемый отрядом урон после вычета брони переносится на новичка (игнорирует его броню)",
    "При нанесении урона в рукопашном бою нанесший урон теряет столько же здоровья, сколько и получивший его",
    "Воздух в комнате вязкий: скорость передвижения падает вдвое, -1 на атаки дальнобойным и метательным оружием",
    "Все в комнате двигаются вдвое медленнее (но скорость восприятия не меняется)",
    "Все в комнате двигаются вдвое быстрее (но скорость восприятия не меняется)",
    "Случайный член отряда впадает в ступор на одну минуту при входе в комнату",
    "Случайный член отряда немедленно падает и засыпает немагическим сном",
    // 140
    "Комната наполнена магией мира: +1 к броне всем",
    "Комната наполнена магией разрушения: +1 к урону всем",
    "Комната заполнена видимым ядовитым газом",
    "Комната заполнена невидимым ядовитым газом",
    "Комната заполнена метаном (любая искра и кранты)",
    "В комнате вакуум",
    "В комнате очень жарко. Любой предмет, который не несут и не носят немедленно вспыхивает",
    "В комнате очень холодно. Все жидкости, в том числе переносимая вода и зелья вне утеплённых контейнеров замерзают",
    "Все огни в комнате горят синим пламенем",
    "Здесь живут культисты",
    // 150
    "Здесь культисты проводят ритуал",
    "Здесь есть монстр за гранью возможностей персонажей (бегите!!!)",
    "Здесь жутчайший туман (5 фт зрения), в котором обитает жуткий туманный монстр (не представляет угрозы, только страшный)",
    "Здесь жутчайший туман (5 фт зрения), в котором обитает жуткий туманный монстр силы +2",
    "ДМ делает бросок по любимой таблице дикой магии и применяет эффект до выхода из комнаты",
    "ДМ делает бросок по любимой таблице дикой магии и применяет эффект до входа в якорную точку",
    "Первый, к кому обращаются по имени, немедленно падает в обморок",
    "Первый, к кому обращаются по имени, немедленно восстанавливает 10 хитов",
    "Первый, к кому обращаются по имени, немедленно умирает. Воскресает при выходе из комнаты",
    "Всё, что происходит в этой комнате, слышно существам в следующей",
    // 160
    "Все существа в комнате не понимают устной речи",
    "Все существа в комнате не могут читать (в том числе карты...)",
    "Все члены отряда не понимают, сколько урона они нанесли (ДМ бросает все кубы урона в закрытую)",
    "Все члены отряда не запоминают, кого из монстров они атаковали последним и выбирают цели случайным образом",
    "Согласно RDP в этой комнате вы не можете говорить правду",
    "Согласно RDP в этой комнате вы не можете лгать (но можете недоговаривать)",
    "Согласно RDP вы должны громко поздороваться со всеми существами в комнате",
    "Согласно RDP вы должны громко вслух проговаривать все свои действия",
    "Когда в комнате произносится любое существительное, названный предмет/существ появляется над сказавшим (они исчезают при выносе из комнате)",
    "Комната наводнена физическими и магическими ловушками",
    // 170
    "Комната наводнена магическими ловушками",
    "Комната наводнена и физическими, и магическими ловушками",
    "В комнате кому-то нужна помощь",
    "Комната выглядит жутко (хотя реальной опасности это не представляет)",
    "В комнате есть деньги",
    "В комнате есть что-то ценное",
    "В комнате есть книги/таблички с загадочными текстами",
    "В комнате есть оракул, отвечающий на вопросы",
    "В комнате есть оракул, предсказывающий будущее",
    "Вы сталкиваетесь с другим отрядом; с ними все нормально",
    // 180
    "Вы сталкиваетесь с другим отрядом; у них пара раненых, но в целом ничего страшного",
    "Вы сталкиваетесь с остатками отряда",
    "Вы сталкиваетесь с случайно выжившим бойцом без карты (единственным из своего отряда)",
    "Вы сталкиваетесь с случайно выжившим капитаном (единственным из своего отряда)",
    "Вы сталкиваетесь с случайно выжившим медиком (единственным из своего отряда)",
    "Здесь синие проводят шаманский ритуал",
    "Здесь красные обустраивают чей-то храм",
    "Комната находится под взглядом Великого Древнего",
    "Комната находится под взглядом Великого Исчадия",
    "Комната находится под взглядом Бога Жизни",
    // 190
    "Все входящие в комнату немедленно излечиваются от всех своих травм",
    "Все мёртвые, кого вносят в комнату, воскресают",
    "Все мёртвые, кого вносят в комнату, восстают как нежить",
    "На самом деле это Опасная Комната, скрытая иллюзией (перегенерируйте соответсвенно)",
    "На самом деле это первая по вероятности комната, скрытая иллюзией (перегенерируйте соответсвенно)",
    "На самом деле это первая по вероятности из оставшихся комнат, скрытая иллюзией (перегенерируйте соответсвенно)",
    "Раз в несколько минут все двери меняются",
    "Раз в несколько минут все особенности комнаты меняются",
    "При убийстве последнего врага отряд откатывается назад во времени на момент входа в комнату",
    "Все члены отряда не видят и не слышат друг друга (антимеметический эффект); однако осязание работает",
    // 200
    "При входе в комнату двери становятся невидимыми для всех, кроме новичка",
    "Все существа в комнате говорят тонкими писклявыми голосами",
    "Все существа в комнате говорят низким басом",
    "Все существа в комнате понимают друг друга, даже если не владеют никаким языком (можно говорить со зверями:))",
    "Все существа в комнате могут общаться телепатически и понимать друг друга вне зависимости от используемого языка (общения со зверями нет)",
    "Согласно RDP все члены отряда должны через слово материться",
    "Согласно RDP все фразы должны произносится в среднем роде, и не должны использоваться никакие личные местоимения, кроме \"оно\" и \"они\"",
    "Согласно RDP вы можете использовать только нечётные двери",
    "Согласно RDP вы можете использовать только чётные двери",
    "Согласно RDP вы можете использовать только те двери, для номера которых выполнено x * 2 - 7 <= 3",
    // 210
    "Согласно RDP вам запрещено смотреть за дверь, пока не пройдёте через неё",
    "Согласно RDP капитан должен сказать \"Ой, извините, дверью ошиблись!\", немедленно развернуться и вернутся в прошлую комнату (ДА! Через ВХОДНУЮ дверь! Это НЕ ОПИСКА!)",
    "К отряду тихо присоединяется Боб (спутник-антимем)",
    "К отряду заметно присоединяется Боб (спутник-антимем)",
    "Отряд находит документ, заражённый Вальтером (искажение текстов)",
    "Согласно RDP вы должны обращаться к другим существам с максимальным уважением: на Вы и добавляя к каждому обращению \"достопочтенный\"",
    "Все монстры в комнате кажутся милыми и добрыми, хотя на самом деле таковыми не являются",
    "Все монстры в комнате кажутся милыми и добрыми, и на самом деле являются таковыми (готовы помочь отряду, если это не связано с прохождением через двери)",
    "Всем членам отряда кажется, что их снаряжение исчезло, но на самом деле это не так",
    "Снаряжение всех членов отряда исчезает, но каждый уверен, что его снаряжение на месте",
    // 220
    "Ваше личное снаряжение в этой комнате будет неэффективно. Согласно RDP вам следует обменяться им с другими членами отряда",
    "В этой комнате нечто, вполне способное устроить ТПК (гигантский сборный голем, древний дракон, Fel Seed и т.п.)",
    "Когда в комнате кто-то говорит об истинности некоторого факта, этот факт в ней немедленно становится ложным",
    "Члены отряда засыпают через 10 секунд после входа в комнату. Они просыпаются раздетыми и связанными в разных углах комнаты, освободиться сам может лишь один из них",
    "Мужчины и женщины воспринимают разные части противников в комнате (хотя по количеству их поровну); антимеметический эффект",
    "Комната наводнена враждебными мимиками",
    "Комната наводнена нейтральными мимиками",
    "Комната наводнена дружелюбными мимиками",
    "В комнате невесомость",
    "Все существа в комнате, кроме отряда, крепко спят",
    // 230
    "Все существа в комнате, включая отряд, непрерывно поют"
};

const char *FOCUSES[FOCUS_NUM] = {
    "Нет",
    "Рукопашный бой",
    "Дальний бой",
    "Магия (волшебство)",
    "Жреческая магия и шаманство",
    "Полноценные боевые отряды (капитан + рукопашка + дальники + кастеры)",
    "Меметическая или антимеметическая угроза",
    "Аномалия",
    "Оборонительная тактика",
    "Наступательная тактика",
    "Хитрая тактика",
    "Задавливание массой",
    "Избегание боя/жертв",
    "Максимальная летальность"
};

int gen_range(int min, int max) {
    return rand() % (max - min + 1) + min;
}

const char *name_count(int count) {
    if (count == 0) return "нет";
    else if (count < RARE_LIMIT) return "мало";
    else if (count < NORMAL_LIMIT) return "нормально";
    else if (count < OFTEN_LIMIT) return "много";
    else return "повсюду";
}

struct ConcreteLocation make_loc(int loc_id) {
    struct ConcreteLocation res = {};
    res.loc_id = loc_id;
    res.x = gen_range(LOC[loc_id].size_min, LOC[loc_id].size_max);
    res.y = gen_range(LOC[loc_id].size_min, LOC[loc_id].size_max);
    res.z = rand() % 10 + 1;
    res.door_num = gen_range(2, LOC[loc_id].door_max);
    res.plants = gen_range(LOC[loc_id].plants_min, LOC[loc_id].plants_max);
    res.fluid = gen_range(LOC[loc_id].fluid_min, LOC[loc_id].fluid_max);
    res.stones = gen_range(LOC[loc_id].stones_min, LOC[loc_id].stones_max);
    res.enemy = gen_range(LOC[loc_id].enemy_min, LOC[loc_id].enemy_max);
    res.power = gen_range(LOC[loc_id].power_min, LOC[loc_id].power_max);
    res.focus[0] = rand() % FOCUS_NUM;
    do {
        res.focus[1] = rand() % FOCUS_NUM;
    } while (res.focus[1] == res.focus[0]);
    return res;
}

int get_probability(int chance, int map_quality) {
    int prob = int(100.0 * chance / MAX_PROBABILITY);
    if (prob % map_quality <= map_quality / 2) prob -= prob % map_quality;
    else prob = prob - prob % map_quality + map_quality;
    return prob;
}

void print_loc(ConcreteLocation l, int map_quality, int level) {
    if (l.loc_id >= 0) {
        printf("%s ", LOC[l.loc_id].name);
    } else {
        printf("Специальная точка ");
    }
	printf("%dx%dx%d клеток (%dx%dx%d футов):\n", l.x, l.y, l.z, l.x * 5, l.y * 5, l.z * 5);
    printf("Растительность: %d<%s>\t", l.plants, name_count(l.plants));
    printf("Жидкость: %d<%s>\t", l.fluid, name_count(l.fluid));
    printf("Камни: %d<%s>\n", l.stones, name_count(l.stones));
    printf("Противники: %d<%s>\t", l.enemy, name_count(l.enemy));
    if (l.loc_id >= 0) {
        printf("Модификатор силы противников: %+.2lf (из них %+.2lf от глубины)\n", l.power / 10.0 + int(level / LANDING_DIST) * 0.25, level / LANDING_DIST * 0.25);
        printf("Типичная жидкость: %s\tТипичные существа: %s\n", LOC[l.loc_id].common_fluid, LOC[l.loc_id].common_enemy);
    } else {
        printf("Модификатор силы противников: %+.2lf\n", l.power / 10.0);
    }
    if (l.focus[0] || l.focus[1]) {
        // mostly inspiration
        printf("Фокус (если врагов достаточно для боя):\n");
        if (l.focus[0]) printf("\t%s\n", FOCUSES[l.focus[0]]);
        if (l.focus[1]) printf("\t%s\n", FOCUSES[l.focus[1]]);
    }
    printf("Особенности:\n");
    for (int trouble : l.troubles) {
        printf("\t%s\n", TROUBLES[trouble]);
    }
    printf("Всего дверей - %ld:\n", l.doors.size());
    int door_id = 0;
    for (Door d: l.doors) {
	    printf("\t-----\n");
        printf("  %d:", door_id);
        door_id++;
		int printed_chances = 0;
        for (auto el = d.chances.begin(); el != d.chances.end(); el++) {
            int prob = get_probability(el->second, map_quality);
            if (prob > 0) {
                printf("\t%s - ~%d%%\n", LOC[el->first].name, prob);
				printed_chances++;
            }
        }
        int prob = get_probability(d.up, map_quality);
        printf("\t!!!");
        if (prob > 0) printf("\tВверх - ~%d%%", prob);
        prob = get_probability(d.same, map_quality);
        if (prob > 0) printf("\tНа уровне - ~%d%%", prob);
        prob = get_probability(d.down, map_quality);
        if (prob > 0) printf("\tВниз - ~%d%%", prob);
        printf("\n");
		int i = 2;
		while ((i + printed_chances) % 6 != 0) {
	        printf("\t-----\n");
			i++;
		}
    }
}

struct Door create_door(unsigned loc_num, int landing_id, int up_buff) {
    struct Door res = {};
    if (loc_num > LOC_NUM)
        return res;
    int global_probability = MAX_PROBABILITY;
    unsigned done_num = 0;
    while (done_num < loc_num && global_probability > 0) {
        int loc_id = rand() % LOC_NUM;
        if (res.chances.find(loc_id) == res.chances.end()) {
            int cur_probability = rand() % global_probability + 1;
            if (done_num == loc_num - 1)
                cur_probability = global_probability;
            global_probability -= cur_probability;
            done_num++;
            res.chances[loc_id] = cur_probability;
        }
    }
    
    global_probability = MAX_PROBABILITY;
    if (rand() % MAX_PROBABILITY - up_buff < MAX_PROBABILITY / 2) {
        // up-directed
        if (landing_id != 0) {
            res.up = rand() % global_probability + 1;
            global_probability -= res.up;
        } else {
            res.up = 0;
        }
        if (landing_id < 0) res.same = rand() % global_probability + 1;
        else res.same = 0;
        res.down = global_probability - res.same;
    } else {
        // down-directed
        if (landing_id != 0) {
            res.down = rand() % global_probability + 1;
            global_probability -= res.down;
            if (landing_id < 0) res.same = rand() % global_probability + 1;
            else res.same = 0;
            res.up = global_probability - res.same;
        } else {
            res.down = global_probability;
            res.same = res.up = 0;
        }
    }
    return res;
}

void gen_doors(struct ConcreteLocation &l, unsigned loc_num, int level, int goal, int luck) {
    int up_buff = (luck - MAX_PROBABILITY / 2) / 4;
    if (0 < level && level < goal) {
        up_buff *= -1; // we shall buff down, not up
    }
    l.doors.clear();
    for (int i = 0; i < l.door_num; i++) {
        if (level % LANDING_DIST == 0 && level < int(LANDING_DIST * LANDING_NUM)) {
            l.doors.push_back(create_door(loc_num, level / LANDING_DIST, up_buff));
        } else {
            l.doors.push_back(create_door(loc_num, -1, up_buff));
        }
    }
}

void gen_troubles(struct ConcreteLocation &l) {
    l.troubles.clear();
    while (rand() % MAX_PROBABILITY <= TROUBLE_CHANCE && l.troubles.size() < MAX_TROUBLES) {
        int trouble_id = rand() % TROUBLE_NUM;
        while (l.troubles.find(trouble_id) != l.troubles.end()) {
            trouble_id = rand() % TROUBLE_NUM;
        }
        l.troubles.insert(trouble_id);
    }
}

int use_door(const struct ConcreteLocation &l, unsigned door_id, int &level, int &goal, int &luck) {
    if (door_id >= l.doors.size())
        return -1;
    // else
    int res_prob = rand() % MAX_PROBABILITY;
    int luck_left = luck;
    if (level < goal && level > 0) {
        if (l.doors[door_id].up + l.doors[door_id].same > res_prob) {
            while (luck_left > 0) {
                if (rand() % MAX_PROBABILITY <= luck_left) {
                    printf("ШАНС! ");
                    luck -= LUCK_STABILISER;
                    res_prob = std::max(res_prob, rand() % MAX_PROBABILITY);
                }
                luck_left -= MAX_PROBABILITY;
            }
        } else {
            while (luck_left < MAX_PROBABILITY) {
                if (rand() % MAX_PROBABILITY > luck_left) {
                    printf("Упс... ");
                    luck += LUCK_STABILISER;
                    res_prob = std::min(res_prob, rand() % MAX_PROBABILITY);
                }
                luck_left += MAX_PROBABILITY;
            }
        }
    } else if (level > goal) {
        if (l.doors[door_id].up + l.doors[door_id].same > res_prob) {
            while (luck_left < MAX_PROBABILITY) {
                if (rand() % MAX_PROBABILITY > luck_left) {
                    printf("Упс... ");
                    luck += LUCK_STABILISER;
                    res_prob = std::max(res_prob, rand() % MAX_PROBABILITY);
                }
                luck_left += MAX_PROBABILITY;
            }
        } else {
            while (luck_left > 0) {
                if (rand() % MAX_PROBABILITY <= luck_left) {
                    printf("ШАНС! ");
                    luck -= LUCK_STABILISER;
                    res_prob = std::min(res_prob, rand() % MAX_PROBABILITY);
                }
                luck_left -= MAX_PROBABILITY;
            }
        }
    }

    if (l.doors[door_id].up > res_prob) {
        if (0 < level && level < goal) {
            luck += LUCK_BUFF;
            // if (luck > MAX_PROBABILITY) luck = MAX_PROBABILITY;
        } else if (level > goal) {
            luck -= LUCK_DEBUFF;
            // if (luck < 0) luck = 0;
        }
        level--;
        printf("Поднялись на %d%s (%.2lf%%)\n", level, (level >= goal ? "!" : ":("), 100.0 * l.doors[door_id].up / MAX_PROBABILITY);
    } else if (l.doors[door_id].up + l.doors[door_id].same > res_prob) {
        printf("На уровне (%.2lf%%)\n", 100.0 * l.doors[door_id].same / MAX_PROBABILITY);
        luck += LUCK_ON_EVEN;
        // if (luck > MAX_PROBABILITY) luck = MAX_PROBABILITY;
    } else {
        if (0 < level && level < goal) {
            luck -= LUCK_DEBUFF;
            // if (luck < 0) luck = 0;
        } else if (level > goal) {
            luck += LUCK_BUFF;
            // if (luck > MAX_PROBABILITY) luck = MAX_PROBABILITY;
        }
        level++;
        printf("Опустились на %d%s (%.2lf%%)\n", level, (level <= goal ? "!" : ":("), 100.0 * l.doors[door_id].down / MAX_PROBABILITY);
    }    

    res_prob = rand() % MAX_PROBABILITY;
    int prob_sum = 0;
    for (auto el = l.doors[door_id].chances.begin(); el != l.doors[door_id].chances.end(); el++) {
        prob_sum += el->second;
        if (prob_sum > res_prob) {
            printf("Пошли в %s (%.2lf%%)\n", LOC[el->first].name, 100.0 * el->second / MAX_PROBABILITY);
            return el->first;
        }
    }
    return -1;
}
